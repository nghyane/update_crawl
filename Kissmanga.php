<?php

namespace App\Crawler;

use App\MadaraCore;
use Symfony\Component\DomCrawler\Crawler;

class Kissmanga extends MadaraCore
{
    public $list_url = "https://1stkissmanga.io/manga/page/%s/";
    public $referer = "https://1stkissmanga.io/";
    public $proxy = false;
    public $chapter_type = 'image';

    function info($url)
    {
        $html = $this->minifier($this->bypass($url));

        $crawler = new Crawler($html);

        $data['name'] = $crawler->filter(".post-title h1")->text();

        if (!$data['name']) {
            return [];
        }

        $post_content = $crawler->filter('.post-content_item')->each(function (Crawler $node) {
            return $node->outerHtml();
        });

        foreach ($post_content as $item) {
            if (strpos($item, 'Alternative') !== false) {
                $data['other_name'] = (new Crawler($item))->filter(".summary-content")->text();
                if ($data['other_name'] == 'Updating') {
                    unset($data['other_name']);
                }
            }


            if (strpos($item, 'Status') !== false) {
                $data['status'] = (new Crawler($item))->filter(".summary-content")->text();
                $data['status'] = ($data['status'] === 'OnGoing') ? 'on-going' : 'completed';
            }
        }

        $data['cover'] = @$crawler->filter('meta[property="og:image"]')->attr('content');

        $crawler->filter(".description-summary .summary__content a")->each(function (Crawler $crawler) {
            foreach ($crawler as $node) {
                $node->parentNode->removeChild($node);
            }
        });

        if($crawler->filter(".description-summary .summary__content")->count() > 0){
            $data['description'] = $this->strip_word_html($crawler->filter(".description-summary .summary__content")->outerHtml());
        }

        $data['taxonomy']['wp-manga-genre'] = $crawler->filter(".genres-content a")->each(function (Crawler $node) {
            return trim($node->text());
        });

        $data['taxonomy']['wp-manga-author'] = $crawler->filter(".author-content a")->each(function (Crawler $node) {
            return trim($node->text());
        });

        $taxonomys = array_filter($crawler->filter(".post-content_item")->each(function (Crawler $node) {
            $text = $node->text();
            if (strpos($text, 'Type') !== false) {
                $data['wp-manga-type'] = $node->filter(".summary-content")->text();
                if ($data['wp-manga-type'] == 'Updating') {
                    unset($data['wp-manga-type']);
                }
            }

            if (strpos($text, 'Tag(s)') !== false) {
                $data['wp-manga-tag'] = $node->filter(".summary-content a")->each(function (Crawler $node) {
                    return trim($node->text());
                });
            }

            if (strpos($text, 'Release') !== false) {
                $data['wp-manga-release'] = $node->filter(".summary-content a")->each(function (Crawler $node) {
                    return trim($node->text());
                });
            }

            return $data ?? null;
        }));

        foreach ($taxonomys as $value) {
            foreach ($value as $key => $value2) {
                $taxonomy[$key] = $value2;
            }
        }

        if (!empty($taxonomy['wp-manga-tag'])) {
            $data['taxonomy']['wp-manga-tag'] = $taxonomy['wp-manga-tag'];
        }

        if (!empty($taxonomy['wp-manga-release'])) {
            $data['taxonomy']['wp-manga-release'] = $taxonomy['wp-manga-release'];
        }

        if (!empty($taxonomy['wp-manga-type'])) {
            $data['type'] = $taxonomy['wp-manga-type'];
        }


        $data['list_chapter'] = array_reverse(array_filter($crawler->filter(".listing-chapters_wrap .wp-manga-chapter")->each(function (Crawler $node) {

            $node = $node->filter('a')->eq(0);
            if (!trim($node->text())) {
                return null;
            }

            return [
                'name_extend' => '',
                'name' => trim($node->text()),
                'url' => $node->attr('href')
            ];
        })));

        return $data;
    }

    function content($url)
    {
        $html = $this->bypass($url);
        $crawler = new Crawler($html);

        $chapter['type'] = 'image';
        $chapter['content'] = $crawler->filter(".reading-content .page-break")->each(function (Crawler $node) {
            return $node->filter("img")->eq(0)->attr("data-lazy-src");
        });


        return $chapter;
    }

    function bypass($url)
    {
        $url = str_replace('1stkissmanga.io', '1stkmgv1.com', $url);
        return parent::curl($url); // TODO: Change the autogenerated stub
    }
}
